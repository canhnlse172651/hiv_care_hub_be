generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String       @db.VarChar(500)
  password    String       @db.VarChar(500)
  phoneNumber String       @db.VarChar(50)
  avatar      String?      @db.VarChar(1000)
  totpSecret  String?      @unique @db.VarChar(1000)
  status      UserStatus   @default(INACTIVE)
  roleId      Int
  role        Role         @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  refreshTokens RefreshToken[]

  // Quan hệ N-N giữa User và Permission
  permissions Permission[] @relation("UserPermissions")

  createdPermissions Permission[] @relation("PermissionCreatedBy")
  updatedPermissions Permission[] @relation("PermissionUpdatedBy")
  createdRoles       Role[]       @relation("RoleCreatedBy")
  updatedRoles       Role[]       @relation("RoleUpdatedBy")
  
  sentMessages       Message[]    @relation("FromUser")
  receivedMessages   Message[]    @relation("ToUser")

  createdById        Int?
  createdBy          User?        @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers       User[]       @relation("CreatorUsers")

  updatedById        Int?
  updatedBy          User?        @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers       User[]       @relation("UpdatorUsers")

  deletedAt          DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  isActive    Boolean    @default(true)

  // Quan hệ N-N giữa Permission và User
  users       User[]     @relation("UserPermissions")

  roles       Role[]

  createdById Int?
  createdBy   User?       @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?       @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(500)
  description String
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User?         @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User?         @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RefreshToken {
  token  String @unique @db.Text
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @unique @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, code, type])
  @@index([expiresAt])
}

model Message {
  id         Int    @id @default(autoincrement())
  fromUserId Int
  fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUserId   Int
  toUser     User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String

  readAt    DateTime?
  createdAt DateTime  @default(now())
}

enum VerificationCodeCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum UserRole {
  ADMIN
  DOCTOR
  STAFF
  PATIENT
}

