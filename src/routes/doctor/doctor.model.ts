import { z } from 'zod';
import { Shift, DayOfWeek } from '@prisma/client';

// Base Doctor Schema
export const DoctorSchema = z.object({
  id: z.number(),
  userId: z.number(),
  specialization: z.string().min(1).max(100),
  certifications: z.array(z.string()),
  maxShiftsPerDay: z.number().min(1).max(2).default(1),
  createdAt: z.date(),
  updatedAt: z.date(),
  createdById: z.number().nullable(),
  updatedById: z.number().nullable(),
  deletedAt: z.date().nullable(),
});

// Doctor Schedule Schema
export const DoctorScheduleSchema = z.object({
  id: z.number(),
  doctorId: z.number(),
  date: z.date(),
  dayOfWeek: z.nativeEnum(DayOfWeek),
  shift: z.nativeEnum(Shift),
  isAutoGenerated: z.boolean().default(false),
  swappedWithId: z.number().nullable(),
  swappedAt: z.date().nullable(),
  createdAt: z.date(),
  updatedAt: z.date(),
  createdById: z.number().nullable(),
  updatedById: z.number().nullable(),
  deletedAt: z.date().nullable(),
});

// Create Doctor Schema
export const CreateDoctorSchema = z.object({
  userId: z.number(),
  specialization: z.string().min(1, 'Specialization is required'),
  certifications: z.array(z.string()).optional(),
  maxShiftsPerDay: z.number().min(1).max(3).optional().default(2),
  isActive: z.boolean().optional().default(true),
  phone: z.string().optional(),
});

// Update Doctor Schema
export const UpdateDoctorSchema = z.object({
  specialization: z.string().min(1, 'Specialization is required').optional(),
  certifications: z.array(z.string()).optional(),
  maxShiftsPerDay: z.number().min(1).max(3).optional(),
});

// Query Doctor Schema
export const QueryDoctorSchema = z.object({
  search: z.string().optional(),
  sortBy: z.enum(['specialization', 'createdAt', 'updatedAt']).optional(),
  sortOrder: z.enum(['asc', 'desc']).optional(),
  specialization: z.string().optional()
});

// Create Schedule Schema
export const CreateScheduleSchema = z.object({
  startDate: z.string().transform(str => new Date(str)),
});

// Swap Shifts Schema
export const SwapShiftsSchema = z.object({
  doctorId1: z.number(),
  doctorId2: z.number(),
  date: z.string().transform(str => new Date(str)),
  shift: z.nativeEnum(Shift),
});

// Create Schedule Config Schema
export const CreateScheduleConfigSchema = z.object({
  doctorsPerShift: z.number().min(1).max(10),
  startDate: z.string().transform(str => new Date(str)),
  endDate: z.string().transform(str => new Date(str)),
}).refine(
  (data) => data.startDate < data.endDate,
  {
    message: 'Start date must be before end date',
    path: ['endDate'],
  }
);

// Register Schedule Schema
export const RegisterScheduleSchema = z.object({
  date: z.string().transform(str => new Date(str)),
  shift: z.nativeEnum(Shift),
}).refine(
  (data) => {
    const dayOfWeek = data.date.getDay();
    // Không cho phép đăng ký vào Chủ nhật (0) hoặc chiều thứ 7 (6)
    return dayOfWeek !== 0 && !(dayOfWeek === 6 && data.shift === Shift.AFTERNOON);
  },
  {
    message: 'Cannot register for Sunday or Saturday afternoon',
    path: ['date'],
  }
);

// Get Doctor Schedule Schema
export const GetDoctorScheduleSchema = z.object({
  startDate: z.string().transform(str => new Date(str)).optional(),
  endDate: z.string().transform(str => new Date(str)).optional(),
}).refine(
  (data) => {
    if (data.startDate && data.endDate) {
      return data.startDate <= data.endDate;
    }
    return true;
  },
  {
    message: 'Start date must be before or equal to end date',
    path: ['endDate'],
  }
);

// Generate Schedule Schema
export const GenerateScheduleSchema = z.object({
  startDate: z.string().datetime({
    message: 'Start date must be a valid date',
  }).refine(
    (date) => {
      const startDate = new Date(date);
      const utcStartDate = new Date(Date.UTC(
        startDate.getUTCFullYear(),
        startDate.getUTCMonth(),
        startDate.getUTCDate()
      ));

      const today = new Date();
      const utcToday = new Date(Date.UTC(
        today.getUTCFullYear(),
        today.getUTCMonth(),
        today.getUTCDate()
      ));

      const nextMonday = new Date(Date.UTC(
        utcToday.getUTCFullYear(),
        utcToday.getUTCMonth(),
        utcToday.getUTCDate() + (8 - utcToday.getUTCDay()) % 7
      ));

      // Cho phép tạo lịch trong các trường hợp:
      // 1. Chủ nhật cho tuần tiếp theo
      // 2. Thứ 2 tuần tiếp theo
      // 3. Thứ 2 tuần hiện tại nếu chưa có lịch
      return (utcStartDate.getUTCDay() === 0 && utcStartDate >= utcToday) || 
             (utcStartDate.getUTCDay() === 1 && utcStartDate >= utcToday);
    },
    {
      message: 'Start date must be either Sunday (for next week) or Monday (for current/next week) and cannot be in the past',
    }
  ),
  doctorsPerShift: z.number().int().min(1, {
    message: 'Number of doctors per shift must be at least 1',
  }),
})

// Types
export type DoctorType = z.infer<typeof DoctorSchema>;
export type DoctorScheduleType = z.infer<typeof DoctorScheduleSchema>;
export type CreateDoctorType = z.infer<typeof CreateDoctorSchema>;
export type UpdateDoctorType = z.infer<typeof UpdateDoctorSchema>;
export type QueryDoctorType = z.infer<typeof QueryDoctorSchema>;
export type SwapShiftsType = z.infer<typeof SwapShiftsSchema>;
export type CreateScheduleConfigType = z.infer<typeof CreateScheduleConfigSchema>;
export type RegisterScheduleType = z.infer<typeof RegisterScheduleSchema>;
export type GetDoctorScheduleType = z.infer<typeof GetDoctorScheduleSchema>;
